// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: music/music.proto

package music

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Music_Upload_FullMethodName  = "/music.Music/Upload"
	Music_GetSong_FullMethodName = "/music.Music/GetSong"
	Music_Search_FullMethodName  = "/music.Music/Search"
	Music_Update_FullMethodName  = "/music.Music/Update"
	Music_Delete_FullMethodName  = "/music.Music/Delete"
)

// MusicClient is the client API for Music service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Music is a service for managing music content like songs and their metadata.
type MusicClient interface {
	// Upload adds a new song to the system.
	Upload(ctx context.Context, in *UploadSongRequest, opts ...grpc.CallOption) (*UploadSongResponse, error)
	// GetSong returns a song by its ID.
	GetSong(ctx context.Context, in *GetSongRequest, opts ...grpc.CallOption) (*GetSongResponse, error)
	// Search finds songs by title, artist, or album.
	Search(ctx context.Context, in *SearchSongsRequest, opts ...grpc.CallOption) (*SearchSongsResponse, error)
	// Update modifies an existing song's metadata.
	Update(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*UpdateSongResponse, error)
	// Delete removes a song by its ID.
	Delete(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error)
}

type musicClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicClient(cc grpc.ClientConnInterface) MusicClient {
	return &musicClient{cc}
}

func (c *musicClient) Upload(ctx context.Context, in *UploadSongRequest, opts ...grpc.CallOption) (*UploadSongResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadSongResponse)
	err := c.cc.Invoke(ctx, Music_Upload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) GetSong(ctx context.Context, in *GetSongRequest, opts ...grpc.CallOption) (*GetSongResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSongResponse)
	err := c.cc.Invoke(ctx, Music_GetSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) Search(ctx context.Context, in *SearchSongsRequest, opts ...grpc.CallOption) (*SearchSongsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSongsResponse)
	err := c.cc.Invoke(ctx, Music_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) Update(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*UpdateSongResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSongResponse)
	err := c.cc.Invoke(ctx, Music_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) Delete(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSongResponse)
	err := c.cc.Invoke(ctx, Music_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicServer is the server API for Music service.
// All implementations must embed UnimplementedMusicServer
// for forward compatibility.
//
// Music is a service for managing music content like songs and their metadata.
type MusicServer interface {
	// Upload adds a new song to the system.
	Upload(context.Context, *UploadSongRequest) (*UploadSongResponse, error)
	// GetSong returns a song by its ID.
	GetSong(context.Context, *GetSongRequest) (*GetSongResponse, error)
	// Search finds songs by title, artist, or album.
	Search(context.Context, *SearchSongsRequest) (*SearchSongsResponse, error)
	// Update modifies an existing song's metadata.
	Update(context.Context, *UpdateSongRequest) (*UpdateSongResponse, error)
	// Delete removes a song by its ID.
	Delete(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error)
	mustEmbedUnimplementedMusicServer()
}

// UnimplementedMusicServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMusicServer struct{}

func (UnimplementedMusicServer) Upload(context.Context, *UploadSongRequest) (*UploadSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedMusicServer) GetSong(context.Context, *GetSongRequest) (*GetSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSong not implemented")
}
func (UnimplementedMusicServer) Search(context.Context, *SearchSongsRequest) (*SearchSongsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedMusicServer) Update(context.Context, *UpdateSongRequest) (*UpdateSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMusicServer) Delete(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMusicServer) mustEmbedUnimplementedMusicServer() {}
func (UnimplementedMusicServer) testEmbeddedByValue()               {}

// UnsafeMusicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicServer will
// result in compilation errors.
type UnsafeMusicServer interface {
	mustEmbedUnimplementedMusicServer()
}

func RegisterMusicServer(s grpc.ServiceRegistrar, srv MusicServer) {
	// If the following call pancis, it indicates UnimplementedMusicServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Music_ServiceDesc, srv)
}

func _Music_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Music_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).Upload(ctx, req.(*UploadSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_GetSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).GetSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Music_GetSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).GetSong(ctx, req.(*GetSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Music_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).Search(ctx, req.(*SearchSongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Music_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).Update(ctx, req.(*UpdateSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Music_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).Delete(ctx, req.(*DeleteSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Music_ServiceDesc is the grpc.ServiceDesc for Music service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Music_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "music.Music",
	HandlerType: (*MusicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _Music_Upload_Handler,
		},
		{
			MethodName: "GetSong",
			Handler:    _Music_GetSong_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Music_Search_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Music_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Music_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "music/music.proto",
}
