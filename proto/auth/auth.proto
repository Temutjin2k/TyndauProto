syntax = "proto3";

package auth;

option go_package = "github.com/Temutjin2k/TyndauProto/gen/go/auth;auth";

import "google/api/annotations.proto";

// Auth is service for managing permissions and roles.
service Auth {
  // Register registers a new user.
  rpc Register (RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/v1/auth/register"
      body: "*"
    };
  }
  
  // Login logs in a user and returns an auth token.
  rpc Login (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/v1/auth/login"
      body: "*"
    };
  }
  
  // IsAdmin checks whether a user is an admin.
  rpc IsAdmin (IsAdminRequest) returns (IsAdminResponse) {
    option (google.api.http) = {
      get: "/v1/auth/{user_id}/is_admin"
    };
  }
  
  // Logout logs out a user.
  rpc Logout (LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/v1/auth/logout"
      body: "*"
    };
  }
}

message RegisterRequest {
  string name = 1; // User name
  string email = 2; // User email
  string password = 3; // user password
  string avatar_link = 4; // Link to user avatar
}

message RegisterResponse {
  int64 user_id = 1; // User ID of the registered user.
}

message LoginRequest {
  string email = 1; // Email of the user to login.
  string password = 2; // Password of the user to login.
}

message LoginResponse {
  string token = 1; // Auth token of the logged in user.
}

message IsAdminRequest {
  int64 user_id = 1; // User ID to validate.
}

message IsAdminResponse {
  bool is_admin = 1;  // Indicates whether the user is an admin.
}


message LogoutRequest {
  string token = 1; // Auth token of the user to logout.
}

message LogoutResponse {
  bool success = 1; // Indicates whether the logout was successful.
}
