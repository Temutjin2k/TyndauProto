syntax = "proto3";

package music;

option go_package = "github.com/Temutjin2k/TyndauProto/gen/go/music;music";

import "google/api/annotations.proto";

// Music is a service for managing music content like songs and their metadata.
service Music {
  // Upload adds a new song to the system.
  rpc Upload (UploadSongRequest) returns (UploadSongResponse) {
    option (google.api.http) = {
      post: "/v1/music/upload"
      body: "*"
    };
  }

  // GetSong returns a song by its ID.
  rpc GetSong (GetSongRequest) returns (GetSongResponse) {
    option (google.api.http) = {
      get: "/v1/music/{id}"
    };
  }

  // Search finds songs by title, artist, or album.
  rpc Search (SearchSongsRequest) returns (SearchSongsResponse) {
    option (google.api.http) = {
      get: "/v1/music/search"
    };
  }

  // Update modifies an existing song's metadata.
  rpc Update (UpdateSongRequest) returns (UpdateSongResponse) {
    option (google.api.http) = {
      patch: "/v1/music/{id}"
      body: "*"
    };
  }

  // Delete removes a song by its ID.
  rpc Delete (DeleteSongRequest) returns (DeleteSongResponse) {
    option (google.api.http) = {
      delete: "/v1/music/{id}"
    };
  }
}

// Represents a song entity.
message Song {
  int64 id = 1;             // Unique identifier for the song.
  string title = 2;          // Title of the song.
  string artist = 3;         // Artist name.
  string album = 4;          // Album name.
  string genre = 5;          // Genre of the song.
  int32 duration_seconds = 6;// Duration in seconds.
  string release_date = 7;   // Release date in ISO format.
  string file_url = 8;       // URL to the song file.
}

// Request to upload a new song.
message UploadSongRequest {
  string title = 1;           // Song title.
  string artist = 2;          // Artist name.
  string album = 3;           // Album name.
  string genre = 4;           // Genre.
  int32 duration_seconds = 5; // Duration in seconds.
  string release_date = 6;    // ISO format.
  string filename = 7;        // Filename like "track.mp3"
}

// Response after uploading a song.
message UploadSongResponse {
  int64 id = 1; // Unique ID of the uploaded song.
  string upload_url = 2;  // Presigned PUT URL to upload the actual file.
  string file_url = 3;   // Permanent public URL to access uploaded file
}

// Request to get a song by ID.
message GetSongRequest {
  int64 id = 1; // Song ID.
}

// Response with the song data.
message GetSongResponse {
  Song song = 1; // The song details.
}

// Request for searching songs.
message SearchSongsRequest {
  string query = 1;  // Free-text search on title, artist, etc.
  int32 limit = 2;   // Max number of songs to return.
  int32 offset = 3;  // Pagination offset.
}

// Response containing matched songs.
message SearchSongsResponse {
  repeated Song songs = 1; // List of matched songs.
}

message UpdateSongRequest {
  int64 id = 1;                     // Обязательное поле (ID трека)
  optional string title = 2;         // Опциональное поле (новый заголовок)
  optional string artist = 3;        // Опциональное поле (новый исполнитель)
  optional string album = 4;         // Опциональное поле (новый альбом)
  optional string genre = 5;         // Опциональное поле (новый жанр)
  optional int32 duration_seconds = 6; // Опциональное поле (новая длительность)
  optional string release_date = 7;  // Опциональное поле (новая дата релиза)
}

// Response after updating a song.
message UpdateSongResponse {
  Song song = 1; // The updated song details.
}

// Request to delete a song by ID.
message DeleteSongRequest {
  int64 id = 1; // Song ID to delete.
}

// Response confirming deletion.
message DeleteSongResponse {
  bool success = 1; // Indicates success of the deletion.
}

